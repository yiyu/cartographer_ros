/* Generated by genom 2.99.26. Do not edit.
 * Source file: ../../mikrokopter.gen
 *
 * Copyright (c) 2015-2016 LAAS/CNRS
 * All rights reserved.
 *
 * Redistribution and use  in source  and binary  forms,  with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *   1. Redistributions of  source  code must retain the  above copyright
 *      notice and this list of conditions.
 *   2. Redistributions in binary form must reproduce the above copyright
 *      notice and  this list of  conditions in the  documentation and/or
 *      other materials provided with the distribution.
 *
 *					Anthony Mallet on Fri Feb 13 2015
 */
#include <stdint.h>

#ifndef _or_time_ts_c_type
# define _or_time_ts_c_type
#line 23 "/home/joselusl/devel/opt/openrobots/share/idl/or/time/time.idl"
typedef struct or_time_ts or_time_ts;
#endif /* _or_time_ts_c_type */

#ifndef _or_time_ts_definition_c_type
# define _or_time_ts_definition_c_type
struct or_time_ts {
#line 24 "/home/joselusl/devel/opt/openrobots/share/idl/or/time/time.idl"
 uint32_t sec;
#line 25 "/home/joselusl/devel/opt/openrobots/share/idl/or/time/time.idl"
 uint32_t nsec;
};
#endif /* _or_time_ts_definition_c_type */
#include <stdint.h>

#ifndef _or_t3d_X_c_type
# define _or_t3d_X_c_type
#line 21 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/t3d.idl"
static const uint16_t or_t3d_X = 0;
#endif /* _or_t3d_X_c_type */
#include <stdint.h>

#ifndef _or_t3d_Y_c_type
# define _or_t3d_Y_c_type
#line 22 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/t3d.idl"
static const uint16_t or_t3d_Y = 1;
#endif /* _or_t3d_Y_c_type */
#include <stdint.h>

#ifndef _or_t3d_Z_c_type
# define _or_t3d_Z_c_type
#line 23 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/t3d.idl"
static const uint16_t or_t3d_Z = 2;
#endif /* _or_t3d_Z_c_type */
#include <stdint.h>

#ifndef _or_t3d_QW_c_type
# define _or_t3d_QW_c_type
#line 25 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/t3d.idl"
static const uint16_t or_t3d_QW = 3;
#endif /* _or_t3d_QW_c_type */
#include <stdint.h>

#ifndef _or_t3d_QX_c_type
# define _or_t3d_QX_c_type
#line 26 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/t3d.idl"
static const uint16_t or_t3d_QX = 4;
#endif /* _or_t3d_QX_c_type */
#include <stdint.h>

#ifndef _or_t3d_QY_c_type
# define _or_t3d_QY_c_type
#line 27 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/t3d.idl"
static const uint16_t or_t3d_QY = 5;
#endif /* _or_t3d_QY_c_type */
#include <stdint.h>

#ifndef _or_t3d_QZ_c_type
# define _or_t3d_QZ_c_type
#line 28 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/t3d.idl"
static const uint16_t or_t3d_QZ = 6;
#endif /* _or_t3d_QZ_c_type */

#ifndef _or_t3d_pos_c_type
# define _or_t3d_pos_c_type
#line 31 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/t3d.idl"
typedef struct or_t3d_pos or_t3d_pos;
#endif /* _or_t3d_pos_c_type */

#ifndef _or_t3d_pos_definition_c_type
# define _or_t3d_pos_definition_c_type
struct or_t3d_pos {
#line 32 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/t3d.idl"
 double x;
#line 32 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/t3d.idl"
 double y;
#line 32 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/t3d.idl"
 double z;
#line 33 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/t3d.idl"
 double qw;
#line 33 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/t3d.idl"
 double qx;
#line 33 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/t3d.idl"
 double qy;
#line 33 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/t3d.idl"
 double qz;
};
#endif /* _or_t3d_pos_definition_c_type */

#ifndef _or_t3d_pos_cov_c_type
# define _or_t3d_pos_cov_c_type
#line 36 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/t3d.idl"
typedef struct or_t3d_pos_cov or_t3d_pos_cov;
#endif /* _or_t3d_pos_cov_c_type */

#ifndef _or_t3d_pos_cov_definition_c_type
# define _or_t3d_pos_cov_definition_c_type
struct or_t3d_pos_cov {
#line 37 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/t3d.idl"
 double cov[28];
};
#endif /* _or_t3d_pos_cov_definition_c_type */

#ifndef _or_t3d_vel_c_type
# define _or_t3d_vel_c_type
#line 43 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/t3d.idl"
typedef struct or_t3d_vel or_t3d_vel;
#endif /* _or_t3d_vel_c_type */

#ifndef _or_t3d_vel_definition_c_type
# define _or_t3d_vel_definition_c_type
struct or_t3d_vel {
#line 44 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/t3d.idl"
 double vx;
#line 44 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/t3d.idl"
 double vy;
#line 44 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/t3d.idl"
 double vz;
#line 45 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/t3d.idl"
 double wx;
#line 45 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/t3d.idl"
 double wy;
#line 45 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/t3d.idl"
 double wz;
};
#endif /* _or_t3d_vel_definition_c_type */

#ifndef _or_t3d_vel_cov_c_type
# define _or_t3d_vel_cov_c_type
#line 48 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/t3d.idl"
typedef struct or_t3d_vel_cov or_t3d_vel_cov;
#endif /* _or_t3d_vel_cov_c_type */

#ifndef _or_t3d_vel_cov_definition_c_type
# define _or_t3d_vel_cov_definition_c_type
struct or_t3d_vel_cov {
#line 49 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/t3d.idl"
 double cov[21];
};
#endif /* _or_t3d_vel_cov_definition_c_type */

#ifndef _or_t3d_acc_c_type
# define _or_t3d_acc_c_type
#line 55 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/t3d.idl"
typedef struct or_t3d_acc or_t3d_acc;
#endif /* _or_t3d_acc_c_type */

#ifndef _or_t3d_acc_definition_c_type
# define _or_t3d_acc_definition_c_type
struct or_t3d_acc {
#line 56 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/t3d.idl"
 double ax;
#line 56 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/t3d.idl"
 double ay;
#line 56 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/t3d.idl"
 double az;
};
#endif /* _or_t3d_acc_definition_c_type */

#ifndef _or_t3d_acc_cov_c_type
# define _or_t3d_acc_cov_c_type
#line 59 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/t3d.idl"
typedef struct or_t3d_acc_cov or_t3d_acc_cov;
#endif /* _or_t3d_acc_cov_c_type */

#ifndef _or_t3d_acc_cov_definition_c_type
# define _or_t3d_acc_cov_definition_c_type
struct or_t3d_acc_cov {
#line 60 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/t3d.idl"
 double cov[6];
};
#endif /* _or_t3d_acc_cov_definition_c_type */
#include <stdbool.h>

#ifndef _optional_or_t3d_pos_c_type
# define _optional_or_t3d_pos_c_type
#line 33 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/pose_estimator.gen"
typedef struct optional_or_t3d_pos {
  bool _present;
  or_t3d_pos _value;
} optional_or_t3d_pos;
#endif /* _optional_or_t3d_pos_c_type */
#include <stdbool.h>

#ifndef _optional_or_t3d_pos_cov_c_type
# define _optional_or_t3d_pos_cov_c_type
#line 34 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/pose_estimator.gen"
typedef struct optional_or_t3d_pos_cov {
  bool _present;
  or_t3d_pos_cov _value;
} optional_or_t3d_pos_cov;
#endif /* _optional_or_t3d_pos_cov_c_type */
#include <stdbool.h>

#ifndef _optional_or_t3d_vel_c_type
# define _optional_or_t3d_vel_c_type
#line 36 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/pose_estimator.gen"
typedef struct optional_or_t3d_vel {
  bool _present;
  or_t3d_vel _value;
} optional_or_t3d_vel;
#endif /* _optional_or_t3d_vel_c_type */
#include <stdbool.h>

#ifndef _optional_or_t3d_vel_cov_c_type
# define _optional_or_t3d_vel_cov_c_type
#line 37 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/pose_estimator.gen"
typedef struct optional_or_t3d_vel_cov {
  bool _present;
  or_t3d_vel_cov _value;
} optional_or_t3d_vel_cov;
#endif /* _optional_or_t3d_vel_cov_c_type */
#include <stdbool.h>

#ifndef _optional_or_t3d_acc_c_type
# define _optional_or_t3d_acc_c_type
#line 39 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/pose_estimator.gen"
typedef struct optional_or_t3d_acc {
  bool _present;
  or_t3d_acc _value;
} optional_or_t3d_acc;
#endif /* _optional_or_t3d_acc_c_type */
#include <stdbool.h>

#ifndef _optional_or_t3d_acc_cov_c_type
# define _optional_or_t3d_acc_cov_c_type
#line 40 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/pose_estimator.gen"
typedef struct optional_or_t3d_acc_cov {
  bool _present;
  or_t3d_acc_cov _value;
} optional_or_t3d_acc_cov;
#endif /* _optional_or_t3d_acc_cov_c_type */
#include <stdbool.h>

#ifndef _or_pose_estimator_state_c_type
# define _or_pose_estimator_state_c_type
#line 27 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/pose_estimator.gen"
typedef struct or_pose_estimator_state or_pose_estimator_state;
#endif /* _or_pose_estimator_state_c_type */

#ifndef _optional_or_t3d_pos_c_type
# define _optional_or_t3d_pos_c_type
#line 33 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/pose_estimator.gen"
typedef struct optional_or_t3d_pos {
  bool _present;
  or_t3d_pos _value;
} optional_or_t3d_pos;
#endif /* _optional_or_t3d_pos_c_type */

#ifndef _optional_or_t3d_pos_cov_c_type
# define _optional_or_t3d_pos_cov_c_type
#line 34 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/pose_estimator.gen"
typedef struct optional_or_t3d_pos_cov {
  bool _present;
  or_t3d_pos_cov _value;
} optional_or_t3d_pos_cov;
#endif /* _optional_or_t3d_pos_cov_c_type */

#ifndef _optional_or_t3d_vel_c_type
# define _optional_or_t3d_vel_c_type
#line 36 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/pose_estimator.gen"
typedef struct optional_or_t3d_vel {
  bool _present;
  or_t3d_vel _value;
} optional_or_t3d_vel;
#endif /* _optional_or_t3d_vel_c_type */

#ifndef _optional_or_t3d_vel_cov_c_type
# define _optional_or_t3d_vel_cov_c_type
#line 37 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/pose_estimator.gen"
typedef struct optional_or_t3d_vel_cov {
  bool _present;
  or_t3d_vel_cov _value;
} optional_or_t3d_vel_cov;
#endif /* _optional_or_t3d_vel_cov_c_type */

#ifndef _optional_or_t3d_acc_c_type
# define _optional_or_t3d_acc_c_type
#line 39 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/pose_estimator.gen"
typedef struct optional_or_t3d_acc {
  bool _present;
  or_t3d_acc _value;
} optional_or_t3d_acc;
#endif /* _optional_or_t3d_acc_c_type */

#ifndef _optional_or_t3d_acc_cov_c_type
# define _optional_or_t3d_acc_cov_c_type
#line 40 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/pose_estimator.gen"
typedef struct optional_or_t3d_acc_cov {
  bool _present;
  or_t3d_acc_cov _value;
} optional_or_t3d_acc_cov;
#endif /* _optional_or_t3d_acc_cov_c_type */

#ifndef _or_pose_estimator_state_definition_c_type
# define _or_pose_estimator_state_definition_c_type
struct or_pose_estimator_state {
#line 28 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/pose_estimator.gen"
 or_time_ts ts;
#line 29 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/pose_estimator.gen"
 bool intrinsic;
#line 33 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/pose_estimator.gen"
 optional_or_t3d_pos pos;
#line 34 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/pose_estimator.gen"
 optional_or_t3d_pos_cov pos_cov;
#line 36 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/pose_estimator.gen"
 optional_or_t3d_vel vel;
#line 37 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/pose_estimator.gen"
 optional_or_t3d_vel_cov vel_cov;
#line 39 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/pose_estimator.gen"
 optional_or_t3d_acc acc;
#line 40 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/pose_estimator.gen"
 optional_or_t3d_acc_cov acc_cov;
};
#endif /* _or_pose_estimator_state_definition_c_type */

//#ifndef _or_rb3d_force_c_type
//# define _or_rb3d_force_c_type
//#line 23 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/rb3d.idl"
//typedef struct or_rb3d_force or_rb3d_force;
//#endif /* _or_rb3d_force_c_type */

//#ifndef _or_rb3d_force_definition_c_type
//# define _or_rb3d_force_definition_c_type
//struct or_rb3d_force {
//#line 24 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/rb3d.idl"
// double x;
//#line 24 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/rb3d.idl"
// double y;
//#line 24 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/rb3d.idl"
// double z;
//};
//#endif /* _or_rb3d_force_definition_c_type */

//#ifndef _or_rb3d_torque_c_type
//# define _or_rb3d_torque_c_type
//#line 28 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/rb3d.idl"
//typedef struct or_rb3d_torque or_rb3d_torque;
//#endif /* _or_rb3d_torque_c_type */

//#ifndef _or_rb3d_torque_definition_c_type
//# define _or_rb3d_torque_definition_c_type
//struct or_rb3d_torque {
//#line 29 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/rb3d.idl"
// double x;
//#line 29 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/rb3d.idl"
// double y;
//#line 29 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/rb3d.idl"
// double z;
//};
//#endif /* _or_rb3d_torque_definition_c_type */

//#ifndef _or_rb3d_wrench_c_type
//# define _or_rb3d_wrench_c_type
//#line 33 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/rb3d.idl"
//typedef struct or_rb3d_wrench or_rb3d_wrench;
//#endif /* _or_rb3d_wrench_c_type */

//#ifndef _or_rb3d_wrench_definition_c_type
//# define _or_rb3d_wrench_definition_c_type
//struct or_rb3d_wrench {
//#line 34 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/rb3d.idl"
// or_rb3d_force f;
//#line 35 "/home/joselusl/devel/opt/openrobots/share/idl/or/pose/rb3d.idl"
// or_rb3d_torque t;
//};
//#endif /* _or_rb3d_wrench_definition_c_type */

//#ifndef _or_rotorcraft_ts_wrench_c_type
//# define _or_rotorcraft_ts_wrench_c_type
//#line 23 "/home/joselusl/devel/opt/openrobots/share/idl/or/robot/rotorcraft.gen"
//typedef struct or_rotorcraft_ts_wrench or_rotorcraft_ts_wrench;
//#endif /* _or_rotorcraft_ts_wrench_c_type */




//#ifndef _or_rotorcraft_ts_wrench_definition_c_type
//# define _or_rotorcraft_ts_wrench_definition_c_type
//struct or_rotorcraft_ts_wrench {
//#line 24 "/home/joselusl/devel/opt/openrobots/share/idl/or/robot/rotorcraft.gen"
// or_time_ts ts;
//#line 25 "/home/joselusl/devel/opt/openrobots/share/idl/or/robot/rotorcraft.gen"
// or_rb3d_wrench w;
//};
//#endif /* _or_rotorcraft_ts_wrench_definition_c_type */
//#include "genom3/c/context.h"

//#ifndef _or_rotorcraft_cmd_wrench_c_type
//# define _or_rotorcraft_cmd_wrench_c_type
//#include "genom3/c/exception.h"
//#line 28 "/home/joselusl/devel/opt/openrobots/share/idl/or/robot/rotorcraft.gen"
//typedef struct or_rotorcraft_cmd_wrench {
//  or_rotorcraft_ts_wrench * (*data)(genom_context self);
//  genom_event (*read)(genom_context self);
//} or_rotorcraft_cmd_wrench;
//#endif /* _or_rotorcraft_cmd_wrench_c_type */
//#include "genom3/c/context.h"

//#ifndef _or_rotorcraft_act_wrench_c_type
//# define _or_rotorcraft_act_wrench_c_type
//#include "genom3/c/exception.h"
//#line 29 "/home/joselusl/devel/opt/openrobots/share/idl/or/robot/rotorcraft.gen"
//typedef struct or_rotorcraft_act_wrench {
//  or_rotorcraft_ts_wrench * (*data)(genom_context self);
//  genom_event (*write)(genom_context self);
//} or_rotorcraft_act_wrench;
//#endif /* _or_rotorcraft_act_wrench_c_type */

//#ifndef _mikrokopter_ether_c_type
//# define _mikrokopter_ether_c_type
//#include "genom3/c/exception.h"
//#line 22 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
//const char genom_extern_weak mikrokopter_ether[] = "::mikrokopter::ether";
//#endif /* _mikrokopter_ether_c_type */

//#ifndef _mikrokopter_start_c_type
//# define _mikrokopter_start_c_type
//#include "genom3/c/exception.h"
//#line 22 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
//const char genom_extern_weak mikrokopter_start[] = "::mikrokopter::start";
//#endif /* _mikrokopter_start_c_type */

//#ifndef _mikrokopter_stop_c_type
//# define _mikrokopter_stop_c_type
//#include "genom3/c/exception.h"
//#line 22 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
//const char genom_extern_weak mikrokopter_stop[] = "::mikrokopter::stop";
//#endif /* _mikrokopter_stop_c_type */
//#include "genom3/c/context.h"

//#ifndef _mikrokopter_cmd_wrench_c_type
//# define _mikrokopter_cmd_wrench_c_type
//#include "genom3/c/exception.h"
//#line 28 "/home/joselusl/devel/opt/openrobots/share/idl/or/robot/rotorcraft.gen"
//typedef struct mikrokopter_cmd_wrench {
//  or_rotorcraft_ts_wrench * (*data)(genom_context self);
//  genom_event (*read)(genom_context self);
//} mikrokopter_cmd_wrench;
//#endif /* _mikrokopter_cmd_wrench_c_type */
//#include "genom3/c/context.h"

//#ifndef _mikrokopter_act_wrench_c_type
//# define _mikrokopter_act_wrench_c_type
//#include "genom3/c/exception.h"
//#line 29 "/home/joselusl/devel/opt/openrobots/share/idl/or/robot/rotorcraft.gen"
//typedef struct mikrokopter_act_wrench {
//  or_rotorcraft_ts_wrench * (*data)(genom_context self);
//  genom_event (*write)(genom_context self);
//} mikrokopter_act_wrench;
//#endif /* _mikrokopter_act_wrench_c_type */
//#include <stdint.h>

//#ifndef _mikrokopter_max_rotors_c_type
//# define _mikrokopter_max_rotors_c_type
//#line 32 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
//static const uint16_t mikrokopter_max_rotors = 8;
//#endif /* _mikrokopter_max_rotors_c_type */
//#include <stdint.h>
//#include "genom3/c/context.h"

//#ifndef _mikrokopter_e_sys_c_type
//# define _mikrokopter_e_sys_c_type
//#include "genom3/c/exception.h"
//#line 34 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
//const char genom_extern_weak mikrokopter_e_sys_id[] = "::mikrokopter::e_sys";
//#line 34 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
//typedef struct mikrokopter_e_sys_detail mikrokopter_e_sys_detail;
//#endif /* _mikrokopter_e_sys_c_type */

//#ifndef _mikrokopter_e_sys_definition_c_type
//# define _mikrokopter_e_sys_definition_c_type
//struct mikrokopter_e_sys_detail {
//#line 34 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
// int16_t code;
//#line 34 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
// char what[128];
//};
//static inline genom_event
//mikrokopter_e_sys(mikrokopter_e_sys_detail *d, genom_context self) {
// return self->raise(mikrokopter_e_sys_id, d, sizeof(*d), self);
//}
//#endif /* _mikrokopter_e_sys_definition_c_type */
//#include "genom3/c/context.h"

//#ifndef _mikrokopter_e_baddev_c_type
//# define _mikrokopter_e_baddev_c_type
//#include "genom3/c/exception.h"
//#line 35 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
//const char genom_extern_weak mikrokopter_e_baddev_id[] = "::mikrokopter::e_baddev";
//#line 35 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
//typedef struct mikrokopter_e_baddev_detail mikrokopter_e_baddev_detail;
//#endif /* _mikrokopter_e_baddev_c_type */

//#ifndef _mikrokopter_e_baddev_definition_c_type
//# define _mikrokopter_e_baddev_definition_c_type
//struct mikrokopter_e_baddev_detail {
//#line 35 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
// char dev[256];
//};
//static inline genom_event
//mikrokopter_e_baddev(mikrokopter_e_baddev_detail *d, genom_context self) {
// return self->raise(mikrokopter_e_baddev_id, d, sizeof(*d), self);
//}
//#endif /* _mikrokopter_e_baddev_definition_c_type */
//#include <stdint.h>
//#include "genom3/c/context.h"

//#ifndef _mikrokopter_e_rotor_failure_c_type
//# define _mikrokopter_e_rotor_failure_c_type
//#include "genom3/c/exception.h"
//#line 36 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
//const char genom_extern_weak mikrokopter_e_rotor_failure_id[] = "::mikrokopter::e_rotor_failure";
//#line 36 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
//typedef struct mikrokopter_e_rotor_failure_detail mikrokopter_e_rotor_failure_detail;
//#endif /* _mikrokopter_e_rotor_failure_c_type */

//#ifndef _mikrokopter_e_rotor_failure_definition_c_type
//# define _mikrokopter_e_rotor_failure_definition_c_type
//struct mikrokopter_e_rotor_failure_detail {
//#line 36 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
// uint16_t id;
//};
//static inline genom_event
//mikrokopter_e_rotor_failure(mikrokopter_e_rotor_failure_detail *d, genom_context self) {
// return self->raise(mikrokopter_e_rotor_failure_id, d, sizeof(*d), self);
//}
//#endif /* _mikrokopter_e_rotor_failure_definition_c_type */
//#include <stdint.h>
//#include "genom3/c/context.h"

//#ifndef _mikrokopter_e_rotor_not_disabled_c_type
//# define _mikrokopter_e_rotor_not_disabled_c_type
//#include "genom3/c/exception.h"
//#line 37 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
//const char genom_extern_weak mikrokopter_e_rotor_not_disabled_id[] = "::mikrokopter::e_rotor_not_disabled";
//#line 37 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
//typedef struct mikrokopter_e_rotor_not_disabled_detail mikrokopter_e_rotor_not_disabled_detail;
//#endif /* _mikrokopter_e_rotor_not_disabled_c_type */

//#ifndef _mikrokopter_e_rotor_not_disabled_definition_c_type
//# define _mikrokopter_e_rotor_not_disabled_definition_c_type
//struct mikrokopter_e_rotor_not_disabled_detail {
//#line 37 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
// uint16_t id;
//};
//static inline genom_event
//mikrokopter_e_rotor_not_disabled(mikrokopter_e_rotor_not_disabled_detail *d, genom_context self) {
// return self->raise(mikrokopter_e_rotor_not_disabled_id, d, sizeof(*d), self);
//}
//#endif /* _mikrokopter_e_rotor_not_disabled_definition_c_type */
//#include "genom3/c/context.h"

//#ifndef _mikrokopter_e_started_c_type
//# define _mikrokopter_e_started_c_type
//#include "genom3/c/exception.h"
//#line 38 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
//const char genom_extern_weak mikrokopter_e_started_id[] = "::mikrokopter::e_started";
//#line 38 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
//typedef void mikrokopter_e_started_detail;
//#endif /* _mikrokopter_e_started_c_type */

//#ifndef _mikrokopter_e_started_definition_c_type
//# define _mikrokopter_e_started_definition_c_type
//static inline genom_event
//mikrokopter_e_started(genom_context self) {
// return self->raise(mikrokopter_e_started_id, NULL, 0, self);
//}
//#endif /* _mikrokopter_e_started_definition_c_type */
//#include "genom3/c/context.h"

//#ifndef _mikrokopter_e_connection_c_type
//# define _mikrokopter_e_connection_c_type
//#include "genom3/c/exception.h"
//#line 38 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
//const char genom_extern_weak mikrokopter_e_connection_id[] = "::mikrokopter::e_connection";
//#line 38 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
//typedef void mikrokopter_e_connection_detail;
//#endif /* _mikrokopter_e_connection_c_type */

//#ifndef _mikrokopter_e_connection_definition_c_type
//# define _mikrokopter_e_connection_definition_c_type
//static inline genom_event
//mikrokopter_e_connection(genom_context self) {
// return self->raise(mikrokopter_e_connection_id, NULL, 0, self);
//}
//#endif /* _mikrokopter_e_connection_definition_c_type */
//#include "genom3/c/context.h"

//#ifndef _mikrokopter_e_range_c_type
//# define _mikrokopter_e_range_c_type
//#include "genom3/c/exception.h"
//#line 38 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
//const char genom_extern_weak mikrokopter_e_range_id[] = "::mikrokopter::e_range";
//#line 38 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
//typedef void mikrokopter_e_range_detail;
//#endif /* _mikrokopter_e_range_c_type */

//#ifndef _mikrokopter_e_range_definition_c_type
//# define _mikrokopter_e_range_definition_c_type
//static inline genom_event
//mikrokopter_e_range(genom_context self) {
// return self->raise(mikrokopter_e_range_id, NULL, 0, self);
//}
//#endif /* _mikrokopter_e_range_definition_c_type */
//#include "genom3/c/context.h"

//#ifndef _mikrokopter_e_input_c_type
//# define _mikrokopter_e_input_c_type
//#include "genom3/c/exception.h"
//#line 38 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
//const char genom_extern_weak mikrokopter_e_input_id[] = "::mikrokopter::e_input";
//#line 38 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
//typedef void mikrokopter_e_input_detail;
//#endif /* _mikrokopter_e_input_c_type */

//#ifndef _mikrokopter_e_input_definition_c_type
//# define _mikrokopter_e_input_definition_c_type
//static inline genom_event
//mikrokopter_e_input(genom_context self) {
// return self->raise(mikrokopter_e_input_id, NULL, 0, self);
//}
//#endif /* _mikrokopter_e_input_definition_c_type */

//#ifndef _mikrokopter_conn_s_c_type
//# define _mikrokopter_conn_s_c_type
//#line 40 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
//typedef struct mikrokopter_conn_s mikrokopter_conn_s;
//#endif /* _mikrokopter_conn_s_c_type */

//#ifndef _mikrokopter_log_s_c_type
//# define _mikrokopter_log_s_c_type
//#line 41 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
//typedef struct mikrokopter_log_s mikrokopter_log_s;
//#endif /* _mikrokopter_log_s_c_type */
//#include <stdbool.h>

//#ifndef _mikrokopter_rotor_s_c_type
//# define _mikrokopter_rotor_s_c_type
//#line 43 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
//typedef struct mikrokopter_rotor_s mikrokopter_rotor_s;
//#endif /* _mikrokopter_rotor_s_c_type */

//#ifndef _mikrokopter_rotor_s_definition_c_type
//# define _mikrokopter_rotor_s_definition_c_type
//struct mikrokopter_rotor_s {
//#line 44 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
// bool emerg;
//#line 44 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
// bool spinning;
//#line 44 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
// bool starting;
//#line 45 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
// double pwm;
//#line 46 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
// double velocity;
//#line 46 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
// double target;
//#line 47 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
// double current;
//};
//#endif /* _mikrokopter_rotor_s_definition_c_type */
//#include <stdint.h>
//#include "genom3/c/idlsequence.h"

//#ifndef _sequence8_mikrokopter_rotor_s_c_type
//# define _sequence8_mikrokopter_rotor_s_c_type
//#line 49 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
//typedef struct sequence8_mikrokopter_rotor_s {
//  const uint32_t _maximum;
//  uint32_t _length;
//  mikrokopter_rotor_s _buffer[8];
//# ifdef __cplusplus
//  sequence8_mikrokopter_rotor_s():_maximum(8) {}
//  sequence8_mikrokopter_rotor_s &operator=(const sequence8_mikrokopter_rotor_s &x) {
//    _length = x._length;
//    for(unsigned i=0; i<_length; i++)
//      _buffer[i] = x._buffer[i];
//    return *this;
//  };
//# endif
//} sequence8_mikrokopter_rotor_s;
//#endif /* _sequence8_mikrokopter_rotor_s_c_type */
//#include <stdint.h>
//#include "genom3/c/idlsequence.h"

//#ifndef _sequence8_mikrokopter_rotor_s_c_type
//# define _sequence8_mikrokopter_rotor_s_c_type
//#line 49 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
//typedef struct sequence8_mikrokopter_rotor_s {
//  const uint32_t _maximum;
//  uint32_t _length;
//  mikrokopter_rotor_s _buffer[8];
//# ifdef __cplusplus
//  sequence8_mikrokopter_rotor_s():_maximum(8) {}
//  sequence8_mikrokopter_rotor_s &operator=(const sequence8_mikrokopter_rotor_s &x) {
//    _length = x._length;
//    for(unsigned i=0; i<_length; i++)
//      _buffer[i] = x._buffer[i];
//    return *this;
//  };
//# endif
//} sequence8_mikrokopter_rotor_s;
//#endif /* _sequence8_mikrokopter_rotor_s_c_type */

//#ifndef _mikrokopter_rotors_s_c_type
//# define _mikrokopter_rotors_s_c_type
//#line 49 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
//typedef sequence8_mikrokopter_rotor_s mikrokopter_rotors_s;
//#endif /* _mikrokopter_rotors_s_c_type */
//#include "genom3/c/context.h"

//#ifndef _mikrokopter_rotors_c_type
//# define _mikrokopter_rotors_c_type
//#include "genom3/c/exception.h"
//#line 51 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
//typedef struct mikrokopter_rotors {
//  mikrokopter_rotors_s * (*data)(genom_context self);
//  genom_event (*write)(genom_context self);
//} mikrokopter_rotors;
//#endif /* _mikrokopter_rotors_c_type */
//#include "genom3/c/context.h"

//#ifndef _mikrokopter_imu_c_type
//# define _mikrokopter_imu_c_type
//#include "genom3/c/exception.h"
//#line 52 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
//typedef struct mikrokopter_imu {
//  or_pose_estimator_state * (*data)(genom_context self);
//  genom_event (*write)(genom_context self);
//} mikrokopter_imu;
//#endif /* _mikrokopter_imu_c_type */
//#include <stdint.h>

#ifndef _mikrokopter_ids_sensor_time_s_ts_s_c_type
# define _mikrokopter_ids_sensor_time_s_ts_s_c_type
#line 63 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
typedef struct mikrokopter_ids_sensor_time_s_ts_s mikrokopter_ids_sensor_time_s_ts_s;
#endif /* _mikrokopter_ids_sensor_time_s_ts_s_c_type */

#ifndef _mikrokopter_ids_sensor_time_s_ts_s_definition_c_type
# define _mikrokopter_ids_sensor_time_s_ts_s_definition_c_type
struct mikrokopter_ids_sensor_time_s_ts_s {
#line 64 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
 uint8_t seq;
#line 65 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
 double ts;
#line 65 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
 double offset;
};
#endif /* _mikrokopter_ids_sensor_time_s_ts_s_definition_c_type */

//#ifndef _mikrokopter_ids_sensor_time_s_rate_s_c_type
//# define _mikrokopter_ids_sensor_time_s_rate_s_c_type
//#line 68 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
//typedef struct mikrokopter_ids_sensor_time_s_rate_s mikrokopter_ids_sensor_time_s_rate_s;
//#endif /* _mikrokopter_ids_sensor_time_s_rate_s_c_type */

//#ifndef _mikrokopter_ids_sensor_time_s_rate_s_definition_c_type
//# define _mikrokopter_ids_sensor_time_s_rate_s_definition_c_type
//struct mikrokopter_ids_sensor_time_s_rate_s {
//#line 69 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
// double imu;
//#line 69 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
// double motor;
//#line 69 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
// double battery;
//};
//#endif /* _mikrokopter_ids_sensor_time_s_rate_s_definition_c_type */

//#ifndef _mikrokopter_ids_sensor_time_s_c_type
//# define _mikrokopter_ids_sensor_time_s_c_type
//#line 62 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
//typedef struct mikrokopter_ids_sensor_time_s mikrokopter_ids_sensor_time_s;
//#endif /* _mikrokopter_ids_sensor_time_s_c_type */

//#ifndef _mikrokopter_ids_sensor_time_s_definition_c_type
//# define _mikrokopter_ids_sensor_time_s_definition_c_type
//struct mikrokopter_ids_sensor_time_s {
//#line 66 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
// mikrokopter_ids_sensor_time_s_ts_s imu;
//#line 66 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
// mikrokopter_ids_sensor_time_s_ts_s motor[8];
//#line 66 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
// mikrokopter_ids_sensor_time_s_ts_s battery;
//#line 70 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
// mikrokopter_ids_sensor_time_s_rate_s rate;
//};
//#endif /* _mikrokopter_ids_sensor_time_s_definition_c_type */

//#ifndef _mikrokopter_ids_battery_s_c_type
//# define _mikrokopter_ids_battery_s_c_type
//#line 74 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
//typedef struct mikrokopter_ids_battery_s mikrokopter_ids_battery_s;
//#endif /* _mikrokopter_ids_battery_s_c_type */

//#ifndef _mikrokopter_ids_battery_s_definition_c_type
//# define _mikrokopter_ids_battery_s_definition_c_type
//struct mikrokopter_ids_battery_s {
//#line 75 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
// double alarm;
//#line 76 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
// double level;
//};
//#endif /* _mikrokopter_ids_battery_s_definition_c_type */

//#ifndef _mikrokopter_ids_imu_calibration_s_c_type
//# define _mikrokopter_ids_imu_calibration_s_c_type
//#line 80 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
//typedef struct mikrokopter_ids_imu_calibration_s mikrokopter_ids_imu_calibration_s;
//#endif /* _mikrokopter_ids_imu_calibration_s_c_type */

//#ifndef _mikrokopter_ids_imu_calibration_s_definition_c_type
//# define _mikrokopter_ids_imu_calibration_s_definition_c_type
//struct mikrokopter_ids_imu_calibration_s {
//#line 81 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
// double gscale[9];
//#line 81 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
// double gbias[3];
//#line 81 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
// double gstddev[3];
//#line 82 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
// double ascale[9];
//#line 82 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
// double abias[3];
//#line 82 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
// double astddev[3];
//};
//#endif /* _mikrokopter_ids_imu_calibration_s_definition_c_type */
//#include <stdint.h>
//#include <stdbool.h>
//#include "genom3/c/idlsequence.h"

//#ifndef _sequence8_boolean_c_type
//# define _sequence8_boolean_c_type
//#line 87 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
//typedef struct sequence8_boolean {
//  const uint32_t _maximum;
//  uint32_t _length;
//  bool _buffer[8];
//# ifdef __cplusplus
//  sequence8_boolean():_maximum(8) {}
//  sequence8_boolean &operator=(const sequence8_boolean &x) {
//    _length = x._length;
//    for(unsigned i=0; i<_length; i++)
//      _buffer[i] = x._buffer[i];
//    return *this;
//  };
//# endif
//} sequence8_boolean;
//#endif /* _sequence8_boolean_c_type */

//#ifndef _mikrokopter_ids_servo_s_c_type
//# define _mikrokopter_ids_servo_s_c_type
//#line 90 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
//typedef struct mikrokopter_ids_servo_s mikrokopter_ids_servo_s;
//#endif /* _mikrokopter_ids_servo_s_c_type */

//#ifndef _mikrokopter_ids_servo_s_definition_c_type
//# define _mikrokopter_ids_servo_s_definition_c_type
//struct mikrokopter_ids_servo_s {
//#line 91 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
// double vmin;
//#line 91 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
// double vmax;
//#line 92 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
// or_rotorcraft_ts_wrench wrench;
//};
//#endif /* _mikrokopter_ids_servo_s_definition_c_type */
//#include <stdint.h>
//#include <stdbool.h>
//#include "genom3/c/idlsequence.h"

//#ifndef _mikrokopter_ids_c_type
//# define _mikrokopter_ids_c_type
//#line 57 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
//typedef struct mikrokopter_ids mikrokopter_ids;
//#endif /* _mikrokopter_ids_c_type */

//#ifndef _sequence8_boolean_c_type
//# define _sequence8_boolean_c_type
//#line 87 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
//typedef struct sequence8_boolean {
//  const uint32_t _maximum;
//  uint32_t _length;
//  bool _buffer[8];
//# ifdef __cplusplus
//  sequence8_boolean():_maximum(8) {}
//  sequence8_boolean &operator=(const sequence8_boolean &x) {
//    _length = x._length;
//    for(unsigned i=0; i<_length; i++)
//      _buffer[i] = x._buffer[i];
//    return *this;
//  };
//# endif
//} sequence8_boolean;
//#endif /* _sequence8_boolean_c_type */

//#ifndef _mikrokopter_ids_definition_c_type
//# define _mikrokopter_ids_definition_c_type
//struct mikrokopter_ids {
//#line 59 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
// mikrokopter_conn_s *conn;
//#line 71 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
// mikrokopter_ids_sensor_time_s sensor_time;
//#line 77 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
// mikrokopter_ids_battery_s battery;
//#line 83 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
// mikrokopter_ids_imu_calibration_s imu_calibration;
//#line 84 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
// bool imu_calibration_updated;
//#line 87 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
// sequence8_boolean disabled_motors;
//#line 93 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
// mikrokopter_ids_servo_s servo;
//#line 96 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
// mikrokopter_log_s *log;
//};
//#endif /* _mikrokopter_ids_definition_c_type */
//#include <stdint.h>

//#ifndef _mikrokopter_control_period_ms_c_type
//# define _mikrokopter_control_period_ms_c_type
//#line 120 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
//static const uint16_t mikrokopter_control_period_ms = 1;
//#endif /* _mikrokopter_control_period_ms_c_type */

//#ifndef _mikrokopter_main_c_type
//# define _mikrokopter_main_c_type
//#include "genom3/c/exception.h"
//#line 126 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
//const char genom_extern_weak mikrokopter_main[] = "::mikrokopter::main";
//#endif /* _mikrokopter_main_c_type */

//#ifndef _mikrokopter_pause_main_c_type
//# define _mikrokopter_pause_main_c_type
//#include "genom3/c/exception.h"
//#line 130 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
//const char genom_extern_weak mikrokopter_pause_main[] = "::mikrokopter::pause::main";
//#endif /* _mikrokopter_pause_main_c_type */

//#ifndef _mikrokopter_poll_c_type
//# define _mikrokopter_poll_c_type
//#include "genom3/c/exception.h"
//#line 138 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
//const char genom_extern_weak mikrokopter_poll[] = "::mikrokopter::poll";
//#endif /* _mikrokopter_poll_c_type */

//#ifndef _mikrokopter_nodata_c_type
//# define _mikrokopter_nodata_c_type
//#include "genom3/c/exception.h"
//#line 141 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
//const char genom_extern_weak mikrokopter_nodata[] = "::mikrokopter::nodata";
//#endif /* _mikrokopter_nodata_c_type */

//#ifndef _mikrokopter_recv_c_type
//# define _mikrokopter_recv_c_type
//#include "genom3/c/exception.h"
//#line 141 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
//const char genom_extern_weak mikrokopter_recv[] = "::mikrokopter::recv";
//#endif /* _mikrokopter_recv_c_type */

//#ifndef _mikrokopter_sleep_c_type
//# define _mikrokopter_sleep_c_type
//#include "genom3/c/exception.h"
//#line 189 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
//const char genom_extern_weak mikrokopter_sleep[] = "::mikrokopter::sleep";
//#endif /* _mikrokopter_sleep_c_type */

//#ifndef _mikrokopter_pause_sleep_c_type
//# define _mikrokopter_pause_sleep_c_type
//#include "genom3/c/exception.h"
//#line 189 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
//const char genom_extern_weak mikrokopter_pause_sleep[] = "::mikrokopter::pause::sleep";
//#endif /* _mikrokopter_pause_sleep_c_type */

//#ifndef _mikrokopter_collect_c_type
//# define _mikrokopter_collect_c_type
//#include "genom3/c/exception.h"
//#line 210 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
//const char genom_extern_weak mikrokopter_collect[] = "::mikrokopter::collect";
//#endif /* _mikrokopter_collect_c_type */

//#ifndef _mikrokopter_pause_collect_c_type
//# define _mikrokopter_pause_collect_c_type
//#include "genom3/c/exception.h"
//#line 212 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
//const char genom_extern_weak mikrokopter_pause_collect[] = "::mikrokopter::pause::collect";
//#endif /* _mikrokopter_pause_collect_c_type */

//#ifndef _mikrokopter_monitor_c_type
//# define _mikrokopter_monitor_c_type
//#include "genom3/c/exception.h"
//#line 254 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
//const char genom_extern_weak mikrokopter_monitor[] = "::mikrokopter::monitor";
//#endif /* _mikrokopter_monitor_c_type */

//#ifndef _mikrokopter_pause_monitor_c_type
//# define _mikrokopter_pause_monitor_c_type
//#include "genom3/c/exception.h"
//#line 257 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
//const char genom_extern_weak mikrokopter_pause_monitor[] = "::mikrokopter::pause::monitor";
//#endif /* _mikrokopter_pause_monitor_c_type */

//#ifndef _mikrokopter_pause_start_c_type
//# define _mikrokopter_pause_start_c_type
//#include "genom3/c/exception.h"
//#line 274 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
//const char genom_extern_weak mikrokopter_pause_start[] = "::mikrokopter::pause::start";
//#endif /* _mikrokopter_pause_start_c_type */




/* Codel functions signatures*/
/*
#ifdef __cplusplus
extern "C" {
#endif


#line 125 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
genom_event mk_main_init(mikrokopter_ids *ids, const mikrokopter_rotors *rotors,
             const mikrokopter_imu *imu, genom_context self);

#line 127 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
genom_event mk_main_perm(const mikrokopter_conn_s *conn,
             const mikrokopter_ids_battery_s *battery,
             const mikrokopter_ids_imu_calibration_s *imu_calibration,
             bool *imu_calibration_updated,
             const mikrokopter_rotors *rotors,
             const mikrokopter_imu *imu, genom_context self);

#line 132 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
genom_event mk_main_stop(mikrokopter_log_s **log, genom_context self);

#line 137 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
genom_event mk_comm_start(mikrokopter_conn_s **conn, genom_context self);

#line 140 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
genom_event mk_comm_poll(const mikrokopter_conn_s *conn, genom_context self);

#line 142 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
genom_event mk_comm_nodata(mikrokopter_conn_s **conn,
               mikrokopter_ids_sensor_time_s *sensor_time,
               const mikrokopter_imu *imu,
               const mikrokopter_rotors *rotors,
               mikrokopter_ids_battery_s *battery, genom_context self);

#line 145 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
genom_event mk_comm_recv(mikrokopter_conn_s **conn, const mikrokopter_log_s *log,
             const mikrokopter_ids_imu_calibration_s *imu_calibration,
             mikrokopter_ids_sensor_time_s *sensor_time,
             const mikrokopter_imu *imu,
             const mikrokopter_rotors *rotors,
             mikrokopter_ids_battery_s *battery, genom_context self);

#line 150 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
genom_event mk_comm_stop(mikrokopter_conn_s **conn, genom_context self);


#line 101 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
genom_event mk_set_sensor_rate(const mikrokopter_ids_sensor_time_s_rate_s *rate,
                   const mikrokopter_conn_s *conn,
                   mikrokopter_ids_sensor_time_s *sensor_time,
                   genom_context self);

#line 109 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
genom_event mk_set_imu_calibration(bool *imu_calibration_updated,
                       genom_context self);


#line 169 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
genom_event mk_connect_start(const char serial[2][64], uint32_t baud,
                 mikrokopter_conn_s **conn,
                 mikrokopter_ids_sensor_time_s *sensor_time,
                 genom_context self);

#line 181 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
genom_event mk_disconnect_start(mikrokopter_conn_s **conn, genom_context self);

#line 189 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
genom_event mk_monitor_check(const mikrokopter_conn_s *conn, genom_context self);

#line 194 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
genom_event mk_disable_motor(uint16_t motor, sequence8_boolean *disabled_motors,
                 genom_context self);

#line 199 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
genom_event mk_enable_motor(uint16_t motor, sequence8_boolean *disabled_motors,
                genom_context self);

#line 209 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
genom_event mk_calibrate_imu_start(double tstill, uint16_t nposes,
                       genom_context self);

#line 211 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
genom_event mk_calibrate_imu_collect(const mikrokopter_imu *imu,
                         genom_context self);

#line 213 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
genom_event mk_calibrate_imu_main(mikrokopter_ids_imu_calibration_s *imu_calibration,
                      bool *imu_calibration_updated,
                      genom_context self);

#line 229 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
genom_event mk_set_zero_start(double accum[3], double gycum[3], uint32_t *n,
                  genom_context self);

#line 231 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
genom_event mk_set_zero_collect(const mikrokopter_imu *imu, double accum[3],
                    double gycum[3], uint32_t *n, genom_context self);

#line 234 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
genom_event mk_set_zero(double accum[3], double gycum[3],
            mikrokopter_ids_imu_calibration_s *imu_calibration,
            bool *imu_calibration_updated, genom_context self);

#line 252 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
genom_event mk_start_start(const mikrokopter_conn_s *conn, uint16_t *state,
               const mikrokopter_rotors *rotors,
               const sequence8_boolean *disabled_motors,
               genom_context self);

#line 255 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
genom_event mk_start_monitor(const mikrokopter_conn_s *conn, uint16_t *state,
                 const mikrokopter_rotors *rotors,
                 const sequence8_boolean *disabled_motors,
                 genom_context self);

#line 258 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
genom_event mk_start_stop(const mikrokopter_conn_s *conn, genom_context self);

#line 269 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
genom_event mk_servo_start(const mikrokopter_conn_s *conn,
               or_rotorcraft_ts_wrench *wrench,
               const mikrokopter_cmd_wrench *cmd_wrench,
               genom_context self);

#line 272 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
genom_event mk_servo_main(const mikrokopter_conn_s *conn,
              mikrokopter_ids_servo_s *servo,
              const mikrokopter_rotors *rotors,
              const sequence8_boolean *disabled_motors,
              genom_context self);

#line 276 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
genom_event mk_servo_stop(const mikrokopter_conn_s *conn,
              mikrokopter_ids_servo_s *servo,
              const mikrokopter_rotors *rotors, genom_context self);

#line 288 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
genom_event mk_set_wrench(const or_rb3d_wrench *wrench,
              or_rotorcraft_ts_wrench *target, genom_context self);

#line 294 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
genom_event mk_stop(const mikrokopter_conn_s *conn, genom_context self);

#line 303 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
genom_event mk_log_start(const char path[64], mikrokopter_log_s **log,
             genom_context self);

#line 311 "/home/joselusl/workspace/mikrokopter-genom3/mikrokopter.gen"
genom_event mk_log_stop(mikrokopter_log_s **log, genom_context self);

#ifdef __cplusplus
}



#endif
*/

